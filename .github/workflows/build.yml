name: build Workflow

on:
  workflow_call:
    inputs:
      image_name:
        required: true
        type: string
        default: ubuntu:jammy
      run_platform:
        required: false
        type: string
        default: ubuntu-22.04
      tool_chain:
        required: true
        type: string
        default: gcc-11

jobs:
  build:
    runs-on: ${{ inputs.run_platform }}
    container:
      image: ${{ inputs.image_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up ROS 2
        uses: ros-tooling/setup-ros@v0.7
        with:
          required-ros-distributions: humble

      - name: download and Use cmake
        run: |
          pip install cmake==3.28.0
          cmake --version

      - name: set up rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: 1.75.0

      - name: Install dependencies for build
        shell: bash
        run: |
          apt install curl wget python3.10  python3-pip  make  vim  libglib2.0-dev  libcurl4-openssl-dev  python3-venv  zip  lcov  bc git build-essential  autoconf  libtool  pkg-config doxygen libacl1-dev -y
          pip install pyinstaller jinja2 setuptools==74.1.2 pyyaml sphinx sphinx_rtd_theme sphinx-design myst-parser build linkify-it-py sphinx_multiversion

      - name: set up toolchain
        shell: bash
        run: |
          if [[ "${{ inputs.tool_chain }}" =~ gcc-([0-9.]+) ]]; then
              version="${BASH_REMATCH[1]}"
              apt-get update -y
              apt-get install software-properties-common -y
              add-apt-repository ppa:ubuntu-toolchain-r/test -y
              apt-get update -y
              apt-get install gcc-$version g++-$version -y
              echo "Extracted version: $version"
              gcc-$version --version
              g++-$version --version
              echo "CC=$(which gcc-$version)" >> $GITHUB_ENV
              echo "CXX=$(which g++-$version)" >> $GITHUB_ENV
          elif [[ "${{ inputs.tool_chain }}" =~ clang-([0-9.]+) ]]; then
              apt install lsb-release wget software-properties-common gnupg -y
              version="${BASH_REMATCH[1]}"
              echo $version
              wget https://apt.llvm.org/llvm.sh
              chmod +x llvm.sh
              ./llvm.sh ${version}
              clang-$version --version
              clang++-$version --version
              echo "CC=$(which clang-$version)" >> $GITHUB_ENV
              echo "CXX=$(which clang++-$version)" >> $GITHUB_ENV
          fi

      - name: start build in linux
        shell: bash
        run: |
          source /opt/ros/humble/setup.bash
          ./build.sh
          ls -lh .
          ls -lh build/
          ls -lh build/aimrt_py_pkg
          ls -lh build/aimrt_py_pkg/dist

      - name: upload build artifact
        id: upload-artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.run_platform }}_artifact
          path: |
            build/aimrt_py_pkg/dist
          retention-days: 3


