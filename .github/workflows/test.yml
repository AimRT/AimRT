name: test Workflow

on:
  workflow_call:
    inputs:
      image_name:
        required: true
        type: string
        default: ubuntu
      run_platform:
        required: false
        type: string
        default: amd64
      tool_chain:
        required: true
        type: string
        default: gcc-11

jobs:
  test:
    runs-on: ${{ inputs.run_platform }}
    container:
      image: ${{ inputs.image_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get short sha
        id: slug
        run: echo "sha8=$(echo ${GITHUB_SHA} | cut -c1-8)" >> $GITHUB_OUTPUT

      - name: Set up ROS 2
        uses: ros-tooling/setup-ros@v0.7
        with:
          required-ros-distributions: humble

      - name: download and Use cmake
        run: |
          pip install cmake==3.28.0
          cmake --version

      - name: set up rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: 1.75.0

      - name: Install dependencies for build
        shell: bash
        run: |
          apt install curl wget python3.10  python3-pip  make  vim  libglib2.0-dev  libcurl4-openssl-dev  python3-venv  zip  lcov  bc git build-essential  autoconf  libtool  pkg-config doxygen libacl1-dev -y
          pip install pyinstaller jinja2 setuptools==74.1.2 pyyaml sphinx sphinx_rtd_theme sphinx-design myst-parser build linkify-it-py sphinx_multiversion


      - name: set up toolchain
        shell: bash
        run: |
          if [[ "${{ inputs.tool_chain }}" =~ gcc-([0-9.]+) ]]; then
              version="${BASH_REMATCH[1]}"
              apt-get update -y
              apt-get install software-properties-common -y
              add-apt-repository ppa:ubuntu-toolchain-r/test -y
              apt-get update -y
              apt-get install gcc-$version g++-$version -y
              echo "Extracted version: $version"
              gcc-$version --version
              g++-$version --version
              echo "CC=$(which gcc-$version)" >> $GITHUB_ENV
              echo "CXX=$(which g++-$version)" >> $GITHUB_ENV
          elif [[ "${{ inputs.tool_chain }}" =~ clang-([0-9.]+) ]]; then
              apt install lsb-release wget software-properties-common gnupg -y
              version="${BASH_REMATCH[1]}"
              echo $version
              wget https://apt.llvm.org/llvm.sh
              chmod +x llvm.sh
              ./llvm.sh ${version}
              clang-$version --version
              clang++-$version --version
              echo "CC=$(which clang-$version)" >> $GITHUB_ENV
              echo "CXX=$(which clang++-$version)" >> $GITHUB_ENV
          fi

      - name: start test
        shell: bash
        run: |
          source /opt/ros/humble/setup.bash
          ./test.sh

      - name: generate test_coverage.sh
        run: |
            echo "generate /tmp/test_coverage.sh ..."

            cat << EOF >/tmp/test_coverage.sh
            #!/bin/bash

            ret=0

            # 创建一个\$workdir文件夹，用于存放所有的.gcda文件
            workdir='/tmp/gtest_report'

            rm \$workdir -rf

            mkdir -p \$workdir

            default_ignore=(
                "_test.cc"
                "_test.c"
                "_test.cpp"
                "*/build/_deps/*"
            )

            default_test_cov_ignore=(
              "*/include/*"
              "*/build/_deps/*"
              \${TEST_COVERAGE_IGNORE[@]}
            )

            # 查找同时存在 *.gcda 和 *.gcno 文件的文件
            gcda_files=\$(find ./build -type f -name "*.gcda")
            for gcda_file in \$gcda_files; do
                # 如果匹配了 \$default_ignore 中的文件，则跳过
                for ignore in \${default_ignore[@]}; do
                    # 使用正则表达式匹配
                    if [[ \$gcda_file =~ \$ignore ]]; then
                        echo "ignore \$gcda_file"
                        continue 2
                    fi
                done

                gcno_file="\${gcda_file%.gcda}.gcno"
                if [ -f "\$gcno_file" ]; then
                    cp "\$gcda_file" "\$workdir"
                    cp "\$gcno_file" "\$workdir"
                fi
            done

            cd \$workdir

            # 如果当前目录下没有gcda文件，则直接退出，不需要进行测试覆盖率检查
            if [ -z "\$(find . -name "*.gcda")" ]; then
                echo "no gcda files, not need to test coverage"
                exit 0
            fi

            # 使用 gcov 来生成覆盖率数据
            gcov *.gcno >/dev/null 2>&1

            # 生成报告
            lcov -c -d . -o coverage.info >/dev/null 2>&1

            # 过滤掉不需要的信息

            for ignore in \${default_test_cov_ignore[@]}; do
                lcov --remove coverage.info "\$ignore" -o coverage.info >/dev/null 2>&1
            done

            # 列出测试覆盖率
            lcov -l coverage.info

            # 判断整体覆盖率是否达标
            test_coverage=\$(lcov -l coverage.info | grep "Total:" | sed 's/|/| /g' | awk '{print \$2}' | awk -F '%' '{print \$1}')
            # if error to get test_coverage
            if [ -z "\$test_coverage" ];
            then
                echo "no test coverage, skip"
                exit 0
            fi

            # 生成html报告
            test_coverage_dir=\${GITHUB_WORKSPACE}/${{ github.repository_owner }}/${{ github.event.repository.name }}/${{ github.ref_name }}/${{ steps.slug.outputs.sha8 }}
            mkdir -p \$test_coverage_dir

            genhtml coverage.info -o \$test_coverage_dir >/dev/null 2>&1

            cd \${GITHUB_WORKSPACE}
            zip -r ${{ steps.slug.outputs.sha8 }}.zip ${{ github.repository_owner }}/${{ github.event.repository.name }}/${{ github.ref_name }}/${{ steps.slug.outputs.sha8 }}

            # 如果 TEST_COVERAGE_THRESHOLD 变量为空，则默认为 0
            if [ -z "\$TEST_COVERAGE_THRESHOLD" ]; then
                TEST_COVERAGE_THRESHOLD=0
            fi

            echo "test coverage: \$test_coverage"

            # 将TEST_COVERAGE_THRESHOLD转换为数字，防止出现字符串比较的情况
            test_coverage_threshold=\$(echo \$TEST_COVERAGE_THRESHOLD | tr -d '"')

            #比较两个数的大小，一个是小数，一个是整数
            if [ \$(echo "\$test_coverage >= \$test_coverage_threshold" | bc) -eq 1 ]; then
                echo "test coverage is greater than \$test_coverage_threshold"
            else
                echo "test coverage is less than \$test_coverage_threshold"
                ret=1
            fi

            exit \$ret

            EOF

      - name: run test_coverage.sh
        shell: bash
        run: |
          chmod +x /tmp/test_coverage.sh
          echo "test_coverage.sh is authorized"
          bash /tmp/test_coverage.sh
          ls -lh .

      - name: upload testcoverage report
        uses: actions/upload-artifact@v4
        if: inputs.tool_chain == 'gcc-11' && inputs.run_platform == 'ubuntu-22.04'
        with:
          name: testcoverage_report
          path: |
              ${{ steps.slug.outputs.sha8 }}.zip
          retention-days: 3